version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  # Database Migration Service (one-shot)
  migrate:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: builder
    environment:
      DATABASE_URL: postgres://app:app@db:5432/app
      NODE_ENV: production
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        pnpm db:push &&
        echo 'Generating Prisma client...' &&
        pnpm db:generate &&
        echo 'Seeding database...' &&
        pnpm db:seed || echo 'Seeding failed or skipped' &&
        echo 'Migration completed successfully!'
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  # Next.js Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgres://app:app@db:5432/app
      NEXT_TELEMETRY_DISABLED: 1
      WEB_BASE_URL: http://localhost:3000
      INGEST_BASE_URL: http://ingest:8787
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Hono Ingest API
  ingest:
    build:
      context: .
      dockerfile: apps/ingest/Dockerfile
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgres://app:app@db:5432/app
      NODE_ENV: production
      PORT: 8787
    ports:
      - "8787:8787"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8787/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network

volumes:
  pgdata:
    driver: local

networks:
  app-network:
    driver: bridge
