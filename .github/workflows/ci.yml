name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  lint-and-typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Typecheck
        run: pnpm typecheck

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          ABUSE_IP_SALT: test-ip-salt
          ABUSE_UA_SALT: test-ua-salt

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        run: |
          pnpm db:push
          pnpm db:seed
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          NODE_ENV: test
          CLERK_SECRET_KEY: sk_test_placeholder
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          ABUSE_IP_SALT: test-ip-salt
          ABUSE_UA_SALT: test-ua-salt
          CHALLENGE_SITE_KEY: test-site-key
          CHALLENGE_SECRET_KEY: test-secret-key
          SHADOW_BAN_ENABLED: false
          SHADOW_BANNED_USER_IDS: ""
          WEB_BASE_URL: http://localhost:3000
          INGEST_BASE_URL: http://localhost:8787
          CRON_SECRET: test-cron-secret
          INGEST_APP_TOKEN: test-app-token
          LOG_LEVEL: error

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          NODE_ENV: test

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Setup database
        run: |
          pnpm db:push
          pnpm db:seed
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          NODE_ENV: test
          CLERK_SECRET_KEY: sk_test_placeholder
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          ABUSE_IP_SALT: test-ip-salt
          ABUSE_UA_SALT: test-ua-salt
          CHALLENGE_SITE_KEY: test-site-key
          CHALLENGE_SECRET_KEY: test-secret-key
          SHADOW_BAN_ENABLED: false
          SHADOW_BANNED_USER_IDS: ""
          WEB_BASE_URL: http://localhost:3000
          INGEST_BASE_URL: http://localhost:8787
          CRON_SECRET: test-cron-secret
          INGEST_APP_TOKEN: test-app-token
          LOG_LEVEL: error

      - name: Build applications
        run: pnpm build
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          WEB_BASE_URL: http://localhost:3000
          INGEST_BASE_URL: http://localhost:8787
          NODE_ENV: production

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          E2E_BASE_URL: http://localhost:3000
          NODE_ENV: test
          CLERK_SECRET_KEY: sk_test_placeholder
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          ABUSE_IP_SALT: test-ip-salt
          ABUSE_UA_SALT: test-ua-salt
          WEB_BASE_URL: http://localhost:3000
          INGEST_BASE_URL: http://localhost:8787
          CRON_SECRET: test-cron-secret
          INGEST_APP_TOKEN: test-app-token

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db

      - name: Build all packages
        run: pnpm build
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_placeholder
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          WEB_BASE_URL: http://localhost:3000
          INGEST_BASE_URL: http://localhost:8787
          NODE_ENV: production

      - name: Check build artifacts
        run: |
          ls -la apps/web/.next/
          ls -la apps/ingest/dist/ || echo "Ingest dist not found"
